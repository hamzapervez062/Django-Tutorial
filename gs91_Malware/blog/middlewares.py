#function based middleware
from django.http import HttpResponse

#function based middleware  
def my_middleware(get_response):
    #one time configuration and initialization  
    print("One time initialization")
    def my_function(request):
        #code to be executed for each request before the view (and later middleware) are called
        print("This is before view")
        response = get_response(request)
        #code to be executed for each request/response after the view is called
        print("This is after view")
        return response 
    return my_function


#class based middleware 
class AnotherMiddleware(object):
    def __init__(self, get_response):
        self.get_response = get_response
        #one time configuration and initialization
        print("One time initialization")
    def __call__(self, request):
        #code to be executed for each request before the view (and later middleware) are called
        print("This is before views")
        response = self.get_response(request)
        #code to be executed for each request/response after the view is called
        print("This is after view")
        return response
    
    # this method is called just before the view is called
    def process_view(request,  *args, **kwargs):
        # return HttpResponse("This is process view")
        #view_func is the view function which will be called
        print("This is process view before")
        # return HttpResponse("This is process view")
        return None
    
class ExceptionMiddleware(object):
    def __init__(self, get_response):
        self.get_response = get_response
        #one time configuration and initialization
        print("One time initialization")
    def __call__(self, request):
        #code to be executed for each request before the view (and later middleware) are called
        print("This is before views")
        response = self.get_response(request)
        #code to be executed for each request/response after the view is called
        print("This is after view")
        return response
    
    def process_exception(self,request,  exception):
        #code to be executed when an exception is raised in view	
        print("This is exception:", exception)	
        class_name = exception.__class__.__name__   
        print("This is exception class name:", class_name)
        msg = exception
        return HttpResponse(msg)
    

class MyTemplateResponseMiddleware(object):
    def __init__(self, get_response):
        self.get_response = get_response
        #one time configuration and initialization
        print("One time initialization")
    def __call__(self, request):
        #code to be executed for each request before the view (and later middleware) are called
        print("This is before views")
        response = self.get_response(request)
        #code to be executed for each request/response after the view is called
        print("This is after view")
        return response
    
    def process_template_response(self, request, response):
        #this method is called just after the view has finished executing and it alters the response	
        print("This is template response after view:")	
        response.context_data['name'] = 'Saira'
        return response
    

